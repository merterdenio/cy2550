#!/usr/bin/env python3

import argparse
import random
import string

def load_words(file_name):
    with open(file_name, "r") as file:
        words = [word.strip() for word in file.readlines()]
    return words

def capitalize_words(password_words, num_caps):
    caps_indices = random.sample(range(len(password_words)), num_caps)
    for index in caps_indices:
        password_words[index] = password_words[index].capitalize()

def insert_numbers(password, num_numbers):
    for _ in range(num_numbers):
        index = random.randint(0, len(password))
        password = password[:index] + str(random.randint(0, 9)) + password[index:]
    return password

def insert_symbols(password, num_symbols):
    symbols = string.punctuation
    for _ in range(num_symbols):
        index = random.randint(0, len(password))
        password = password[:index] + random.choice(symbols) + password[index:]
    return password

def generate_password(words, num_words, num_caps, num_numbers, num_symbols):
    password_words = random.sample(words, num_words)
    capitalize_words(password_words, num_caps)
    password = "".join(password_words)
    password = insert_numbers(password, num_numbers)
    password = insert_symbols(password, num_symbols)
    return password

def main():
    parser = argparse.ArgumentParser(description="Generate a secure, memorable password using the XKCD method")
    parser.add_argument("-w", "--words", type=int, default=4, help="include WORDS words in the password (default=4)")
    parser.add_argument("-c", "--caps", type=int, default=0, help="capitalize the first letter of CAPS random words (default=0)")
    parser.add_argument("-n", "--numbers", type=int, default=0, help="insert NUMBERS random numbers in the password (default=0)")
    parser.add_argument("-s", "--symbols", type=int, default=0, help="insert SYMBOLS random symbols in the password (default=0)")

    args = parser.parse_args()

    if args.caps > args.words:
        print("Error: The number of capitalized words cannot be greater than the total number of words in the password.")
        return

    if args.words < 1:
        print("Error: The total number of words in the password must be at least 1.")
        return

    words = load_words("words.txt")
    password = generate_password(words, args.words, args.caps, args.numbers, args.symbols)
    print(password)

if __name__ == "__main__":
    main()
